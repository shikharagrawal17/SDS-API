public interface Kernel32Extra extends Library {
        Kernel32Extra INSTANCE = Native.load("kernel32", Kernel32Extra.class);
        
        boolean GetDiskFreeSpaceEx(String lpDirectoryName, LongByReference lpFreeBytesAvailable, 
                                   LongByReference lpTotalNumberOfBytes, LongByReference lpTotalNumberOfFreeBytes);
    }

    public static long getFileSizeOnDisk(String filePath) {
        Kernel32Extra kernel32 = Kernel32Extra.INSTANCE;
        WinDef.DWORD dwFlagsAndAttributes = new WinDef.DWORD(WinBase.FILE_ATTRIBUTE_NORMAL);
        WinDef.HANDLE hFile = Kernel32.INSTANCE.CreateFile(filePath, WinDef.DWORD.ZERO, WinDef.DWORD.ZERO, null, WinDef.DWORD.ZERO, dwFlagsAndAttributes, null);
        
        if (WinBase.INVALID_HANDLE_VALUE.equals(hFile)) {
            return -1; // error
        }

        LongByReference lpFileSizeHigh = new LongByReference();
        int low = Kernel32.INSTANCE.GetFileSize(hFile, lpFileSizeHigh);
        Kernel32.INSTANCE.CloseHandle(hFile);
        if (low == -1) {
            return -1; // error
        }

        long fileSize = (((long) lpFileSizeHigh.getValue()) << 32) + (low & 0xffffffffL);
        long clusterSize = getClusterSize(filePath);
        long sizeOnDisk = (fileSize + clusterSize - 1) / clusterSize * clusterSize;
        return sizeOnDisk;
    }

    private static long getClusterSize(String path) {
        LongByReference lpSectorsPerCluster = new LongByReference();
        LongByReference lpBytesPerSector = new LongByReference();
        LongByReference lpNumberOfFreeClusters = new LongByReference();
        LongByReference lpTotalNumberOfClusters = new LongByReference();
        
        if (Kernel32Extra.INSTANCE.GetDiskFreeSpaceEx(path, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters)) {
            return lpSectorsPerCluster.getValue() * lpBytesPerSector.getValue();
        } else {
            return 4096; // default cluster size if unable to determine
        }
    }





import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.jna.platform.win32.Kernel32;
import com.sun.jna.platform.win32.WinBase;
import com.sun.jna.platform.win32.WinDef;
import com.sun.jna.ptr.LongByReference;





public static void main(String[] args) {
        String filePath = "C:\\path\\to\\your\\file";
        long sizeOnDisk = getFileSizeOnDisk(filePath);
        System.out.println("Size on Disk: " + sizeOnDisk + " bytes");
    }